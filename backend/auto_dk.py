# automation_app.py
import os
import time
import threading
from flask import Flask, request, jsonify
from flask_cors import CORS
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException, \
    ElementClickInterceptedException
import pyperclip
import signal

app = Flask(__name__)
CORS(app)

# Timeout t·ªïng th·ªÉ cho to√†n b·ªô qu√° tr√¨nh automation (50 gi√¢y - tƒÉng cho modal)
TOTAL_TIMEOUT = 50

class TimeoutError(Exception):
    pass

def timeout_handler(signum, frame):
    raise TimeoutError("Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° 35 gi√¢y")

# --- C·∫§U H√åNH SELENIUM ---
def _initialize_driver():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt instance WebDriver."""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # T·ªëi ∆∞u: t·∫Øt t·∫£i ·∫£nh, font, stylesheet ƒë·ªÉ tƒÉng t·ªëc
    prefs = {
        "profile.managed_default_content_settings.images": 2,
        "profile.managed_default_content_settings.fonts": 2,
        "profile.managed_default_content_settings.stylesheets": 2,
        "profile.default_content_setting_values.notifications": 2,
        "profile.managed_default_content_settings.popups": 2,
        "profile.managed_default_content_settings.plugins": 2,
        "profile.managed_default_content_settings.geolocation": 2,
        "profile.managed_default_content_settings.media_stream": 2,
    }
    chrome_options.add_experimental_option("prefs", prefs)
    
    try:
        service = ChromeService()
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Th√™m script ƒë·ªÉ ·∫©n webdriver
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        # Set timeout t·ªëi ∆∞u cho page load
        driver.set_page_load_timeout(8)  # T·ªëi ∆∞u: 8 gi√¢y cho ƒëƒÉng nh·∫≠p nhanh
        driver.implicitly_wait(2)  # T·ªëi ∆∞u: 2 gi√¢y cho ƒëƒÉng nh·∫≠p nhanh
        
        print("‚úÖ ƒê√£ kh·ªüi t·∫°o tr√¨nh duy·ªát th√†nh c√¥ng")
        return driver
    except WebDriverException as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o Chrome driver: {e}")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o driver: {e}")
        return None

def _login_to_timesoft(driver: webdriver.Chrome):
    """Th·ª±c hi·ªán c√°c b∆∞·ªõc ƒëƒÉng nh·∫≠p v√†o Timesoft."""
    try:
        print(f"üîÑ ƒêang ƒëƒÉng nh·∫≠p...")
        
        driver.get("https://hdfitnessyoga.timesoft.vn/")
        print("‚úÖ ƒê√£ truy c·∫≠p trang web")
        
        # ƒê·ª£i trang load ho√†n to√†n (t·ªëi ∆∞u: 3 gi√¢y)
        WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # ƒê·ª£i form ƒëƒÉng nh·∫≠p xu·∫•t hi·ªán (t·ªëi ∆∞u: 2 gi√¢y)
        username_field = WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.ID, "UserName"))
        )
        password_field = WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.ID, "Password"))
        )
        
        # Clear v√† nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p (t·ªëi ∆∞u: kh√¥ng sleep)
        username_field.clear()
        username_field.send_keys("Vuongvv")
        print("‚úÖ ƒê√£ nh·∫≠p username")
        
        password_field.clear()
        password_field.send_keys("291199")
        print("‚úÖ ƒê√£ nh·∫≠p password")
        
        # Click n√∫t ƒëƒÉng nh·∫≠p (t·ªëi ∆∞u: 2 gi√¢y)
        login_button = WebDriverWait(driver, 2).until(
            EC.element_to_be_clickable((By.ID, "btnLogin"))
        )
        login_button.click()
        print("‚úÖ ƒê√£ click n√∫t ƒëƒÉng nh·∫≠p")
        
        # ƒê·ª£i trang ch√≠nh xu·∫•t hi·ªán (t·ªëi ∆∞u: 5 gi√¢y - quan tr·ªçng nh·∫•t)
        # Th·ª≠ nhi·ªÅu c√°ch ƒë·ªÉ ƒë·∫£m b·∫£o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.ID, "radio_0"))
            )
        except TimeoutException:
            # Th·ª≠ c√°ch kh√°c n·∫øu radio_0 kh√¥ng xu·∫•t hi·ªán
            try:
                WebDriverWait(driver, 3).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "input.form-control.form-search-main"))
                )
            except TimeoutException:
                # Th·ª≠ c√°ch cu·ªëi c√πng
                WebDriverWait(driver, 2).until(
                    EC.presence_of_element_located((By.TAG_NAME, "table"))
                )
        
        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        return True
        
    except TimeoutException as e:
        print(f"‚ùå Timeout khi ƒëƒÉng nh·∫≠p: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒëƒÉng nh·∫≠p: {e}")
        return False


# automation_app.py

# ... (c√°c imports kh√°c)

# √Ånh x·∫° g√≥i t·∫≠p sang index cho GYM - Ph√¢n bi·ªát kh√°ch c≈© v√† kh√°ch m·ªõi
MEMBERSHIP_INDEX_MAP_GYM_EXISTING = {
    "1 year": 2,  # GYM 12 TH√ÅNG (c) kh√°ch c≈©
    "1 month": 3,  # GYM 1 TH√ÅNG (c) kh√°ch c≈©
    "1 day": 4,  # GYM 1 NG√ÄY (c) kh√°ch c≈©
    "3 months": 5,  # GYM 3 TH√ÅNG (c) kh√°ch c≈©
    "6 months": 6,  # GYM 6 TH√ÅNG (c) kh√°ch c≈©
}

MEMBERSHIP_INDEX_MAP_GYM_NEW = {
    "1 year": 10,  # GYM 12 TH√ÅNG (m) kh√°ch m·ªõi
    "1 month": 7,  # GYM 1 TH√ÅNG (m) kh√°ch m·ªõi
    "1 day": 11,  # GYM 1 NG√ÄY (m) kh√°ch m·ªõi
    "3 months": 8,  # GYM 3 TH√ÅNG (m) kh√°ch m·ªõi
    "6 months": 9,  # GYM 6 TH√ÅNG (m) kh√°ch m·ªõi
}

# √Ånh x·∫° g√≥i t·∫≠p sang index cho YOGA - Ph√¢n bi·ªát kh√°ch c≈© v√† kh√°ch m·ªõi
MEMBERSHIP_INDEX_MAP_YOGA_EXISTING = {
    "1 month": 1,  # Yoga 1T 12B (c) kh√°ch c≈©
    "3 months": 2,  # YOGA 3T 36B (c) kh√°ch c≈©
    "6 months": 3,  # YOGA 6T 72B (c) kh√°ch c≈©
    "1 year": "last()"  # YOGA 12 TH√ÅNG 144B (c) kh√°ch c≈©
}

MEMBERSHIP_INDEX_MAP_YOGA_NEW = {
    "1 month": 12,  # Yoga 1T 12B (m) kh√°ch m·ªõi
    "3 months": 13,  # YOGA 3T 36B (m) kh√°ch m·ªõi
    "6 months": 10,  # YOGA 6T 72B (m) kh√°ch m·ªõi
    "1 year": "11"  # YOGA 12 TH√ÅNG 144B (m) kh√°ch m·ªõi
}


def _get_membership_map(service_type, customer_type):
    """
    L·∫•y map g√≥i t·∫≠p ph√π h·ª£p d·ª±a tr√™n lo·∫°i d·ªãch v·ª• v√† lo·∫°i kh√°ch h√†ng
    """
    if service_type.lower() == "gym":
        if customer_type == "new":
            return MEMBERSHIP_INDEX_MAP_GYM_NEW
        else:  # existing
            return MEMBERSHIP_INDEX_MAP_GYM_EXISTING
    elif service_type.lower() == "yoga":
        if customer_type == "new":
            return MEMBERSHIP_INDEX_MAP_YOGA_NEW
        else:  # existing
            return MEMBERSHIP_INDEX_MAP_YOGA_EXISTING
    else:
        return None


def _create_membership_for_customer(phone_number, service_type, membership_type, customer_type):
    """
    T·∫°o g√≥i t·∫≠p cho kh√°ch h√†ng v·ªõi map ph√π h·ª£p d·ª±a tr√™n lo·∫°i kh√°ch h√†ng
    """
    driver = None
    start_time = time.time()
    timer = None
    try:
        # Thi·∫øt l·∫≠p timeout t·ªïng th·ªÉ
        if os.name != 'nt':  # Unix/Linux
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(TOTAL_TIMEOUT)
        else:  # Windows
            def raise_timeout():
                raise TimeoutError(f"Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y (Windows)")
            timer = threading.Timer(TOTAL_TIMEOUT, raise_timeout)
            timer.start()
        
        print(f"üöÄ B·∫Øt ƒë·∫ßu t·∫°o g√≥i t·∫≠p cho kh√°ch h√†ng: {phone_number} (lo·∫°i: {customer_type})")
        
        driver = _initialize_driver()
        if not driver:
            return {"status": "error", "message": "Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát cho t·ª± ƒë·ªông h√≥a."}

        if not _login_to_timesoft(driver):
            return {"status": "error", "message": "ƒêƒÉng nh·∫≠p Timesoft th·∫•t b·∫°i."}

        # B∆Ø·ªöC 1: T√¨m kh√°ch h√†ng (T·ªëi ∆∞u timeout)
        try:
            radio_all = WebDriverWait(driver, 4).until(  # T·ªëi ∆∞u: 4 gi√¢y
                EC.element_to_be_clickable((By.ID, "radio_0"))
            )
            radio_all.click()
            time.sleep(0.3)  # T·ªëi ∆∞u: 0.3 gi√¢y

            search_input = WebDriverWait(driver, 4).until(  # T·ªëi ∆∞u: 4 gi√¢y
                EC.presence_of_element_located((By.CSS_SELECTOR, "input.form-control.form-search-main"))
            )
            search_input.clear()
            search_input.send_keys(phone_number)
            search_input.send_keys(Keys.ENTER)
            time.sleep(1)  # T·ªëi ∆∞u: 0.8 gi√¢y - ƒë·ªß ƒë·ªÉ load k·∫øt qu·∫£
        except TimeoutException as e:
            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc t√¨m kh√°ch h√†ng: {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh t√¨m kh√°ch h√†ng: {e}"}

        # B∆Ø·ªöC 2: Click v√†o bi·ªÉu t∆∞·ª£ng "ƒêƒÉng k√Ω g√≥i t·∫≠p" (TƒÉng timeout cho modal)
        try:
            # Th·ª≠ nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ t√¨m n√∫t ƒëƒÉng k√Ω g√≥i t·∫≠p
            register_icon = None
            
            # C√°ch 1: T√¨m theo XPath v·ªõi class v√† ng-click (tƒÉng: 8 gi√¢y)
            try:
                register_icon = WebDriverWait(driver, 8).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, '//a[contains(@ng-click, "showRegisterModal")]//i[@class="fa fa-plus ts-register"]'))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo class name (tƒÉng: 4 gi√¢y)
                try:
                    register_icon = WebDriverWait(driver, 4).until(
                        EC.element_to_be_clickable((By.CLASS_NAME, "ts-register"))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m theo text content (tƒÉng: 4 gi√¢y)
                    try:
                        register_icon = WebDriverWait(driver, 4).until(
                            EC.element_to_be_clickable((By.XPATH, "//i[contains(@class, 'fa-plus')]"))
                        )
                    except TimeoutException:
                        print("C√°ch 3 th·∫•t b·∫°i, th·ª≠ c√°ch 4...")
                        
                        # C√°ch 4: T√¨m theo link text (tƒÉng: 4 gi√¢y)
                        try:
                            register_icon = WebDriverWait(driver, 4).until(
                                EC.element_to_be_clickable((By.XPATH, "//a[contains(., 'ƒêƒÉng k√Ω') or contains(., 'Register')]") )
                            )
                        except TimeoutException:
                            # N·∫øu t·∫•t c·∫£ c√°ch ƒë·ªÅu th·∫•t b·∫°i, l·∫•y HTML ƒë·ªÉ debug
                            current_html = driver.page_source
                            print(f"Kh√¥ng t√¨m th·∫•y n√∫t ƒëƒÉng k√Ω g√≥i t·∫≠p. HTML hi·ªán t·∫°i (c·∫Øt 800 k√Ω t·ª±): {current_html[:800]}")
                            return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y n√∫t ƒëƒÉng k√Ω g√≥i t·∫≠p. Vui l√≤ng ki·ªÉm tra l·∫°i trang web ho·∫∑c li√™n h·ªá h·ªó tr·ª£."}
            
            if register_icon:
                for attempt in range(3):
                    try:
                        try:
                            register_icon.click()
                        except ElementClickInterceptedException:
                            driver.execute_script("arguments[0].click();", register_icon)
                        time.sleep(1.2)
                        # Ki·ªÉm tra modal ƒë√£ m·ªü ch∆∞a b·∫±ng JS
                        modal_open = driver.execute_script('''
                            var el = document.querySelector('md-select[placeholder="Ch·ªçn nh√≥m d·ªãch v·ª•"]');
                            return el && el.offsetParent !== null;
                        ''')
                        if modal_open:
                            break
                    except Exception as e:
                        print(f"Th·ª≠ m·ªü modal l·∫ßn {attempt+1} th·∫•t b·∫°i: {e}")
                    if attempt == 2:
                        current_html = driver.page_source
                        print(f"Kh√¥ng m·ªü ƒë∆∞·ª£c modal sau 3 l·∫ßn th·ª≠. HTML hi·ªán t·∫°i (c·∫Øt 800 k√Ω t·ª±): {current_html[:800]}")
                        return {"status": "error", "message": "ƒê√£ th·ª≠ nhi·ªÅu l·∫ßn nh∆∞ng modal kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}
                else:
                    # N·∫øu sau 3 l·∫ßn v·∫´n ch∆∞a m·ªü, tr·∫£ v·ªÅ l·ªói
                    return {"status": "error", "message": "Kh√¥ng m·ªü ƒë∆∞·ª£c modal ƒëƒÉng k√Ω g√≥i t·∫≠p sau nhi·ªÅu l·∫ßn th·ª≠."}
                # Ki·ªÉm tra xem modal ƒë√£ m·ªü ch∆∞a (tƒÉng: 8 gi√¢y)
                try:
                    WebDriverWait(driver, 8).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'md-select[placeholder="Ch·ªçn nh√≥m d·ªãch v·ª•"]'))
                    )
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click n√∫t ƒëƒÉng k√Ω g√≥i t·∫≠p nh∆∞ng modal kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}
        
        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh click ƒêƒÉng k√Ω g√≥i t·∫≠p: {str(e)}"}

        # B∆Ø·ªöC 3: Click v√†o md-select ƒë·ªÉ m·ªü dropdown "Ch·ªçn nh√≥m d·ªãch v·ª•" (TƒÉng timeout)
        print(f"üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang m·ªü dropdown 'Ch·ªçn nh√≥m d·ªãch v·ª•'...")
        try:
            service_group_select_element = None
            
            # C√°ch 1: T√¨m theo placeholder (tƒÉng: 6 gi√¢y)
            try:
                service_group_select_element = WebDriverWait(driver, 6).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[placeholder="Ch·ªçn nh√≥m d·ªãch v·ª•"]'))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo ng-model (tƒÉng: 4 gi√¢y)
                try:
                    service_group_select_element = WebDriverWait(driver, 4).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model*="Service"]'))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m t·∫•t c·∫£ md-select v√† ch·ªçn c√°i ƒë·∫ßu ti√™n
                    try:
                        all_md_selects = driver.find_elements(By.CSS_SELECTOR, 'md-select')
                        if all_md_selects:
                            service_group_select_element = all_md_selects[0]
                            print(f"T√¨m th·∫•y {len(all_md_selects)} md-select elements, s·ª≠ d·ª•ng c√°i ƒë·∫ßu ti√™n")
                        else:
                            raise Exception("Kh√¥ng t√¨m th·∫•y md-select n√†o")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn nh√≥m d·ªãch v·ª•. HTML hi·ªán t·∫°i (c·∫Øt 800 k√Ω t·ª±): {current_html[:800]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn nh√≥m d·ªãch v·ª•. Vui l√≤ng ki·ªÉm tra l·∫°i trang web."}
            
            if service_group_select_element:
                # Th·ª≠ click b√¨nh th∆∞·ªùng tr∆∞·ªõc
                try:
                    service_group_select_element.click()
                except ElementClickInterceptedException:
                    # N·∫øu b·ªã ch·∫∑n, d√πng JavaScript click
                    driver.execute_script("arguments[0].click();", service_group_select_element)

                # ƒê·ª£i dropdown m·ªü (tƒÉng: 5 gi√¢y)
                try:
                    WebDriverWait(driver, 5).until(
                        EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                    )
                    time.sleep(0.5)  # TƒÉng: 0.5 gi√¢y - ƒë·ªß ƒë·ªÉ dropdown ·ªïn ƒë·ªãnh
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click dropdown nh∆∞ng menu kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}
                    
        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh m·ªü nh√≥m d·ªãch v·ª•: {str(e)}"}

        # Ki·ªÉm tra th·ªùi gian ƒë√£ tr√¥i qua
        elapsed_time = time.time() - start_time
        if elapsed_time > 45:  # TƒÉng: 45 gi√¢y - ph√π h·ª£p v·ªõi timeout m·ªõi cho modal
            return {"status": "error", "message": f"Qu√° tr√¨nh automation ƒë√£ m·∫•t qu√° nhi·ªÅu th·ªùi gian ({elapsed_time:.1f}s). Vui l√≤ng th·ª≠ l·∫°i."}

        # B∆Ø·ªöC 3b: Ch·ªçn nh√≥m d·ªãch v·ª• (Gym/Yoga) - C·∫£i thi·ªán error handling
        print(f"üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang ch·ªçn nh√≥m d·ªãch v·ª•: {service_type.upper()}...")
        try:
            target_index_service = -1
            if service_type.lower() == "gym":
                target_index_service = 1
            elif service_type.lower() == "yoga":
                target_index_service = 2

            if target_index_service == -1:
                return {"status": "error",
                        "message": f"Lo·∫°i d·ªãch v·ª• '{service_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ index ƒë∆∞·ª£c √°nh x·∫°."}

            service_option_element = None
            
            # C√°ch 1: T√¨m theo XPath v·ªõi optgroup label
            try:
                service_option_element = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH,
                                                f'//md-select-menu//md-optgroup[@label="Ch·ªçn ch·ª©c danh"]/md-option[{target_index_service}]'
                                                ))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo text content
                try:
                    if service_type.lower() == "gym":
                        service_option_element = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//md-option[contains(text(), 'GYM') or contains(text(), 'Gym')]"))
                        )
                    elif service_type.lower() == "yoga":
                        service_option_element = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//md-option[contains(text(), 'YOGA') or contains(text(), 'Yoga')]"))
                        )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m t·∫•t c·∫£ options v√† ch·ªçn theo index
                    try:
                        all_options = driver.find_elements(By.CSS_SELECTOR, 'md-select-menu md-option')
                        if len(all_options) >= target_index_service:
                            service_option_element = all_options[target_index_service - 1]
                            print(f"T√¨m th·∫•y {len(all_options)} options, ch·ªçn option th·ª© {target_index_service}")
                        else:
                            raise Exception(f"Ch·ªâ c√≥ {len(all_options)} options, kh√¥ng ƒë·ªß ƒë·ªÉ ch·ªçn option th·ª© {target_index_service}")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y option cho {service_type}. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", 
                                "message": f"Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn '{service_type}' trong dropdown. Vui l√≤ng ki·ªÉm tra l·∫°i."}

            if service_option_element:
                # Th·ª≠ click b√¨nh th∆∞·ªùng tr∆∞·ªõc
                try:
                    service_option_element.click()
                except ElementClickInterceptedException:
                    # N·∫øu b·ªã ch·∫∑n, d√πng JavaScript click
                    driver.execute_script("arguments[0].click();", service_option_element)

                time.sleep(1)
                
                # Ki·ªÉm tra xem option ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
                try:
                    WebDriverWait(driver, 5).until(
                        EC.invisibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                    )
                except TimeoutException:
                    return {"status": "error", "message": f"ƒê√£ click option {service_type} nh∆∞ng dropdown kh√¥ng ƒë√≥ng. Vui l√≤ng th·ª≠ l·∫°i."}

        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn nh√≥m d·ªãch v·ª•: {str(e)}"}

        # B∆Ø·ªöC 4: Ch·ªçn g√≥i t·∫≠p - C·∫£i thi·ªán error handling v·ªõi map ph√π h·ª£p
        print(f"üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang ch·ªçn g√≥i t·∫≠p: {membership_type}...")
        try:
            product_select = None
            
            # C√°ch 1: T√¨m theo ng-model
            try:
                product_select = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.ProductIdStr"]'))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo placeholder
                try:
                    product_select = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[placeholder*="g√≥i"]'))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m t·∫•t c·∫£ md-select v√† ch·ªçn c√°i th·ª© 2 (sau service group)
                    try:
                        all_md_selects = driver.find_elements(By.CSS_SELECTOR, 'md-select')
                        if len(all_md_selects) >= 2:
                            product_select = all_md_selects[1]
                            print(f"T√¨m th·∫•y {len(all_md_selects)} md-select elements, s·ª≠ d·ª•ng c√°i th·ª© 2")
                        else:
                            raise Exception(f"Ch·ªâ c√≥ {len(all_md_selects)} md-select elements, kh√¥ng ƒë·ªß ƒë·ªÉ ch·ªçn c√°i th·ª© 2")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn g√≥i t·∫≠p. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn g√≥i t·∫≠p. Vui l√≤ng ki·ªÉm tra l·∫°i trang web."}
            
            if product_select:
                # Click ƒë·ªÉ m·ªü dropdown
                try:
                    product_select.click()
                except ElementClickInterceptedException:
                    driver.execute_script("arguments[0].click();", product_select)

                # ƒê·ª£i dropdown m·ªü
                try:
                    WebDriverWait(driver, 10).until(
                        EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                    )
                    time.sleep(1)
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click dropdown g√≥i t·∫≠p nh∆∞ng menu kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}

                # Ch·ªçn map d·ª±a tr√™n service_type v√† customer_type
                current_membership_map = _get_membership_map(service_type, customer_type)
                if current_membership_map is None:
                    return {"status": "error",
                            "message": f"Lo·∫°i d·ªãch v·ª• '{service_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ map g√≥i t·∫≠p ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a."}

                target_index_membership_xpath_part = current_membership_map.get(membership_type)
                if target_index_membership_xpath_part is None:
                    return {"status": "error",
                            "message": f"G√≥i t·∫≠p '{membership_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ index ƒë∆∞·ª£c √°nh x·∫° trong map c·ªßa {service_type.upper()} cho kh√°ch {customer_type}."}

                # T√¨m v√† ch·ªçn g√≥i t·∫≠p
                membership_option_element = None
                
                # C√°ch 1: T√¨m theo XPath v·ªõi optgroup label
                try:
                    membership_option_xpath = (
                        f'//md-select-menu//md-optgroup[@label="T√¨m g√≥i"]/md-option[{target_index_membership_xpath_part}]'
                    )
                    membership_option_element = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, membership_option_xpath))
                    )
                except TimeoutException:
                    print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                    
                    # C√°ch 2: T√¨m theo text content
                    try:
                        membership_option_element = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, f"//md-option[contains(text(), '{membership_type}')]"))
                        )
                    except TimeoutException:
                        print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                        
                        # C√°ch 3: T√¨m t·∫•t c·∫£ options v√† ch·ªçn theo index
                        try:
                            all_membership_options = driver.find_elements(By.CSS_SELECTOR, 'md-select-menu md-option')
                            if len(all_membership_options) >= target_index_membership_xpath_part:
                                membership_option_element = all_membership_options[target_index_membership_xpath_part - 1]
                                print(f"T√¨m th·∫•y {len(all_membership_options)} membership options, ch·ªçn option th·ª© {target_index_membership_xpath_part}")
                            else:
                                raise Exception(f"Ch·ªâ c√≥ {len(all_membership_options)} membership options, kh√¥ng ƒë·ªß ƒë·ªÉ ch·ªçn option th·ª© {target_index_membership_xpath_part}")
                        except Exception as e:
                            current_html = driver.page_source
                            print(f"Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p {membership_type}. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                            return {"status": "error",
                                    "message": f"Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p '{membership_type}' trong dropdown. Vui l√≤ng ki·ªÉm tra l·∫°i."}

                if membership_option_element:
                    # Click ƒë·ªÉ ch·ªçn g√≥i t·∫≠p
                    try:
                        membership_option_element.click()
                    except ElementClickInterceptedException:
                        driver.execute_script("arguments[0].click();", membership_option_element)

                    time.sleep(1)
                    
                    # Ki·ªÉm tra xem g√≥i t·∫≠p ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
                    try:
                        WebDriverWait(driver, 5).until(
                            EC.invisibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                        )
                    except TimeoutException:
                        return {"status": "error", "message": f"ƒê√£ click g√≥i t·∫≠p {membership_type} nh∆∞ng dropdown kh√¥ng ƒë√≥ng. Vui l√≤ng th·ª≠ l·∫°i."}

        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn g√≥i t·∫≠p: {str(e)}"}

        # B∆Ø·ªöC 5: Ch·ªçn ki·ªÉu thanh to√°n - C·∫£i thi·ªán error handling
        print("üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang ch·ªçn ki·ªÉu thanh to√°n...")
        try:
            payment_type_select = None
            
            # C√°ch 1: T√¨m theo ng-model
            try:
                payment_type_select = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.PaymentType"]'))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo placeholder
                try:
                    payment_type_select = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[placeholder*="thanh to√°n"]'))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m t·∫•t c·∫£ md-select v√† ch·ªçn c√°i th·ª© 3 (sau service group v√† product)
                    try:
                        all_md_selects = driver.find_elements(By.CSS_SELECTOR, 'md-select')
                        if len(all_md_selects) >= 3:
                            payment_type_select = all_md_selects[2]
                            print(f"T√¨m th·∫•y {len(all_md_selects)} md-select elements, s·ª≠ d·ª•ng c√°i th·ª© 3")
                        else:
                            raise Exception(f"Ch·ªâ c√≥ {len(all_md_selects)} md-select elements, kh√¥ng ƒë·ªß ƒë·ªÉ ch·ªçn c√°i th·ª© 3")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn ki·ªÉu thanh to√°n. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn ki·ªÉu thanh to√°n. Vui l√≤ng ki·ªÉm tra l·∫°i trang web."}
            
            if payment_type_select:
                # Click ƒë·ªÉ m·ªü dropdown
                try:
                    payment_type_select.click()
                except ElementClickInterceptedException:
                    driver.execute_script("arguments[0].click();", payment_type_select)

                # ƒê·ª£i dropdown m·ªü
                try:
                    WebDriverWait(driver, 10).until(
                        EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                    )
                    time.sleep(1)
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click dropdown ki·ªÉu thanh to√°n nh∆∞ng menu kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}

                # Ch·ªçn t√πy ch·ªçn "Chuy·ªÉn kho·∫£n"
                transfer_option_element = None
                
                # C√°ch 1: T√¨m theo XPath v·ªõi optgroup label
                try:
                    transfer_option_element = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH,
                                                    '//md-select-menu//md-optgroup[@label="Ch·ªçn ki·ªÉu thanh to√°n"]/md-option[2]'
                                                    ))
                    )
                except TimeoutException:
                    print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                    
                    # C√°ch 2: T√¨m theo text content
                    try:
                        transfer_option_element = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//md-option[contains(text(), 'Chuy·ªÉn kho·∫£n') or contains(text(), 'Transfer')]"))
                        )
                    except TimeoutException:
                        print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                        
                        # C√°ch 3: T√¨m t·∫•t c·∫£ options v√† ch·ªçn c√°i th·ª© 2
                        try:
                            all_payment_options = driver.find_elements(By.CSS_SELECTOR, 'md-select-menu md-option')
                            if len(all_payment_options) >= 2:
                                transfer_option_element = all_payment_options[1]
                                print(f"T√¨m th·∫•y {len(all_payment_options)} payment options, ch·ªçn option th·ª© 2")
                            else:
                                raise Exception(f"Ch·ªâ c√≥ {len(all_payment_options)} payment options, kh√¥ng ƒë·ªß ƒë·ªÉ ch·ªçn option th·ª© 2")
                        except Exception as e:
                            current_html = driver.page_source
                            print(f"Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn chuy·ªÉn kho·∫£n. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                            return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn 'Chuy·ªÉn kho·∫£n' trong dropdown. Vui l√≤ng ki·ªÉm tra l·∫°i."}

                if transfer_option_element:
                    # Click ƒë·ªÉ ch·ªçn ki·ªÉu thanh to√°n
                    try:
                        transfer_option_element.click()
                    except ElementClickInterceptedException:
                        driver.execute_script("arguments[0].click();", transfer_option_element)

                    time.sleep(1)
                    
                    # Ki·ªÉm tra xem option ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
                    try:
                        WebDriverWait(driver, 5).until(
                            EC.invisibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                        )
                    except TimeoutException:
                        return {"status": "error", "message": "ƒê√£ click t√πy ch·ªçn chuy·ªÉn kho·∫£n nh∆∞ng dropdown kh√¥ng ƒë√≥ng. Vui l√≤ng th·ª≠ l·∫°i."}

        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn ki·ªÉu thanh to√°n: {str(e)}"}

        # B∆Ø·ªöC 6: Ch·ªçn t√†i kho·∫£n - C·∫£i thi·ªán error handling
        print("üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang ch·ªçn t√†i kho·∫£n...")
        try:
            bank_account_select = None
            
            # C√°ch 1: T√¨m theo ng-model
            try:
                bank_account_select = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.BankAccountIdStr"]'))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo placeholder
                try:
                    bank_account_select = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[placeholder*="t√†i kho·∫£n"]'))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m t·∫•t c·∫£ md-select v√† ch·ªçn c√°i cu·ªëi c√πng
                    try:
                        all_md_selects = driver.find_elements(By.CSS_SELECTOR, 'md-select')
                        if all_md_selects:
                            bank_account_select = all_md_selects[-1]
                            print(f"T√¨m th·∫•y {len(all_md_selects)} md-select elements, s·ª≠ d·ª•ng c√°i cu·ªëi c√πng")
                        else:
                            raise Exception("Kh√¥ng t√¨m th·∫•y md-select n√†o")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn t√†i kho·∫£n. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y dropdown ch·ªçn t√†i kho·∫£n. Vui l√≤ng ki·ªÉm tra l·∫°i trang web."}
            
            if bank_account_select:
                # Click ƒë·ªÉ m·ªü dropdown
                try:
                    bank_account_select.click()
                except ElementClickInterceptedException:
                    driver.execute_script("arguments[0].click();", bank_account_select)

                # ƒê·ª£i dropdown m·ªü
                try:
                    WebDriverWait(driver, 15).until(
                        EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                    )
                    time.sleep(2)
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click dropdown t√†i kho·∫£n nh∆∞ng menu kh√¥ng m·ªü. Vui l√≤ng th·ª≠ l·∫°i."}

                # Ch·ªçn t√†i kho·∫£n ƒë·∫ßu ti√™n
                bank_account_option_element = None
                
                # C√°ch 1: T√¨m theo XPath v·ªõi optgroup label
                try:
                    bank_account_option_element = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((By.XPATH,
                                                        '//md-select-menu//md-optgroup[@label="Ch·ªçn t√†i kho·∫£n"]/md-option[1]'
                                                        ))
                    )
                except TimeoutException:
                    print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                    
                    # C√°ch 2: T√¨m t·∫•t c·∫£ options v√† ch·ªçn c√°i ƒë·∫ßu ti√™n
                    try:
                        all_bank_options = driver.find_elements(By.CSS_SELECTOR, 'md-select-menu md-option')
                        if all_bank_options:
                            bank_account_option_element = all_bank_options[0]
                            print(f"T√¨m th·∫•y {len(all_bank_options)} bank account options, ch·ªçn option ƒë·∫ßu ti√™n")
                        else:
                            raise Exception("Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn t√†i kho·∫£n n√†o")
                    except Exception as e:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn t√†i kho·∫£n. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn t√†i kho·∫£n trong dropdown. Vui l√≤ng ki·ªÉm tra l·∫°i."}

                if bank_account_option_element:
                    # Click ƒë·ªÉ ch·ªçn t√†i kho·∫£n
                    try:
                        bank_account_option_element.click()
                    except ElementClickInterceptedException:
                        driver.execute_script("arguments[0].click();", bank_account_option_element)

                    time.sleep(1)
                    
                    # Ki·ªÉm tra xem option ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
                    try:
                        WebDriverWait(driver, 5).until(
                            EC.invisibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
                        )
                    except TimeoutException:
                        return {"status": "error", "message": "ƒê√£ click t√πy ch·ªçn t√†i kho·∫£n nh∆∞ng dropdown kh√¥ng ƒë√≥ng. Vui l√≤ng th·ª≠ l·∫°i."}

        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn t√†i kho·∫£n: {str(e)}"}

        # B∆Ø·ªöC 7: B·∫•m n√∫t "T·∫°o m·ªõi" (T·∫°o g√≥i t·∫≠p) - C·∫£i thi·ªán error handling
        print("üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang t·∫°o g√≥i t·∫≠p...")
        try:
            create_button = None
            
            # C√°ch 1: T√¨m theo ID
            try:
                create_button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "aInsert"))
                )
            except TimeoutException:
                print("C√°ch 1 th·∫•t b·∫°i, th·ª≠ c√°ch 2...")
                
                # C√°ch 2: T√¨m theo text content
                try:
                    create_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'T·∫°o m·ªõi') or contains(text(), 'Create')]"))
                    )
                except TimeoutException:
                    print("C√°ch 2 th·∫•t b·∫°i, th·ª≠ c√°ch 3...")
                    
                    # C√°ch 3: T√¨m theo class
                    try:
                        create_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, 'button.btn-success'))
                        )
                    except TimeoutException:
                        current_html = driver.page_source
                        print(f"Kh√¥ng t√¨m th·∫•y n√∫t t·∫°o m·ªõi. HTML hi·ªán t·∫°i (c·∫Øt 2000 k√Ω t·ª±): {current_html[:2000]}")
                        return {"status": "error", "message": "Kh√¥ng t√¨m th·∫•y n√∫t t·∫°o m·ªõi. Vui l√≤ng ki·ªÉm tra l·∫°i trang web."}
            
            if create_button:
                # Click ƒë·ªÉ t·∫°o g√≥i t·∫≠p
                try:
                    create_button.click()
                except ElementClickInterceptedException:
                    driver.execute_script("arguments[0].click();", create_button)

                # ƒê·ª£i n√∫t bi·∫øn m·∫•t (d·∫•u hi·ªáu ƒëang x·ª≠ l√Ω)
                try:
                    WebDriverWait(driver, 15).until(EC.invisibility_of_element_located((By.ID, "aInsert")))
                    print("‚úÖ G√≥i t·∫≠p ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                    return {"status": "success", "message": "Gia h·∫°n g√≥i t·∫≠p th√†nh c√¥ng.", "final_action": "return_home"}
                except TimeoutException:
                    return {"status": "error", "message": "ƒê√£ click n√∫t t·∫°o m·ªõi nh∆∞ng qu√° tr√¨nh x·ª≠ l√Ω kh√¥ng ho√†n t·∫•t. Vui l√≤ng th·ª≠ l·∫°i."}

        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh t·∫°o g√≥i t·∫≠p: {str(e)}"}

    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh gia h·∫°n g√≥i t·∫≠p: {str(e)}")
        # L·∫•y HTML ƒë·ªÉ debug
        try:
            current_html = driver.page_source
            print(f"HTML hi·ªán t·∫°i khi l·ªói (c·∫Øt 1500 k√Ω t·ª±): {current_html[:1500]}")
        except Exception as html_err:
            print(f"Kh√¥ng th·ªÉ l·∫•y HTML ƒë·ªÉ debug: {html_err}")
        return {"status": "error", "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh gia h·∫°n g√≥i t·∫≠p: {str(e)}"}
    except TimeoutError:
        elapsed_time = time.time() - start_time
        print(f"‚è∞ Timeout t·ªïng th·ªÉ: Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y (th·ª±c t·∫ø: {elapsed_time:.1f}s)")
        return {"status": "error", "message": f"Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y. Vui l√≤ng th·ª≠ l·∫°i."}
    finally:
        # H·ªßy timeout
        if os.name != 'nt':
            signal.alarm(0)
        elif timer:
            timer.cancel()
        
        if driver:
            try:
                driver.quit()
                print("üîí ƒê√£ ƒë√≥ng tr√¨nh duy·ªát")
            except Exception as quit_err:
                print(f"L·ªói khi ƒë√≥ng tr√¨nh duy·ªát: {quit_err}")
        
        # In th·ªùi gian t·ªïng th·ªÉ
        total_elapsed = time.time() - start_time
        print(f"‚è±Ô∏è T·ªïng th·ªùi gian automation: {total_elapsed:.1f} gi√¢y")
        if total_elapsed < 20:
            print("üöÄ T·ªëc ƒë·ªô xu·∫•t s·∫Øc!")
        elif total_elapsed < 30:
            print("‚ö° T·ªëc ƒë·ªô t·ªët!")
        else:
            print("üêå T·ªëc ƒë·ªô ch·∫≠m, c·∫ßn t·ªëi ∆∞u th√™m")


# --- H√†m t·ª± ƒë·ªông h√≥a cho kh√°ch c≈© (T·ªëi ∆∞u cho 60 gi√¢y) ---
def _automate_for_existing_customer_sync(phone_number, service_type, membership_type):
    """
    H√†m wrapper cho kh√°ch c≈© - g·ªçi h√†m chung v·ªõi customer_type = "existing"
    """
    return _create_membership_for_customer(phone_number, service_type, membership_type, "existing")


# --- H√†m t·ª± ƒë·ªông h√≥a cho kh√°ch m·ªõi (T·ªëi ∆∞u cho 60 gi√¢y) ---
def _automate_for_new_customer_sync(phone_number, full_name, service_type, membership_type):
    driver = None
    start_time = time.time()
    timer = None
    try:
        # Thi·∫øt l·∫≠p timeout t·ªïng th·ªÉ
        if os.name != 'nt':  # Unix/Linux
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(TOTAL_TIMEOUT)
        else:  # Windows
            def raise_timeout():
                raise TimeoutError(f"Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y (Windows)")
            timer = threading.Timer(TOTAL_TIMEOUT, raise_timeout)
            timer.start()
        
        print(f"üöÄ B·∫Øt ƒë·∫ßu automation cho kh√°ch h√†ng m·ªõi: {full_name} - {phone_number}")
        
        driver = _initialize_driver()
        if not driver:
            return {"status": "error", "message": "Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát cho t·ª± ƒë·ªông h√≥a."}

        if not _login_to_timesoft(driver):
            return {"status": "error", "message": "ƒêƒÉng nh·∫≠p Timesoft th·∫•t b·∫°i."}

        print("ƒêang ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng k√Ω kh√°ch h√†ng m·ªõi...")
        time.sleep(0.5)  # T·ªëi ∆∞u: 0.5 gi√¢y
        
        try:
            # S·ª≠ d·ª•ng XPATH ƒë·ªÉ t√¨m n√∫t d·ª±a tr√™n class v√† text
            add_new_customer_button = WebDriverWait(driver, 6).until(  # T·ªëi ∆∞u: 6 gi√¢y
                EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(@class, 'btn-green') and contains(., 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω(F1)')]")
                )
            )
            add_new_customer_button.click()
            print("ƒê√£ click n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)'.")
            time.sleep(0.6)  # T·ªëi ∆∞u: 0.6 gi√¢y
        except TimeoutException as e:
            return {"status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng click ƒë∆∞·ª£c n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)': {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi click n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)': {e}"}
        
        time.sleep(0.3)  # T·ªëi ∆∞u: 0.3 gi√¢y
        
        try:
            # T√¨m tr∆∞·ªùng nh·∫≠p "H·ªç v√† t√™n" (full_name)
            full_name_input_selector = (By.XPATH, "//input[@ng-model='item.Name' and @type='text']")
            full_name_input = WebDriverWait(driver, 4).until(  # T·ªëi ∆∞u: 4 gi√¢y
                EC.presence_of_element_located(full_name_input_selector)
            )
            full_name_input.click()
            print("ƒê√£ click v√†o tr∆∞·ªùng 'H·ªç v√† t√™n'.")
            full_name_input.send_keys(full_name)
            print(f"ƒê√£ ƒëi·ªÅn t√™n: {full_name}")
            time.sleep(0.5)  # T·ªëi ∆∞u: 0.5 gi√¢y

            phone_number_input_selector = (By.XPATH, "//input[@ng-model='item.Mobile' and @type='text']")
            phone_number_input = WebDriverWait(driver, 4).until(  # T·ªëi ∆∞u: 4 gi√¢y
                EC.presence_of_element_located(phone_number_input_selector)
            )
            phone_number_input.click()
            print("ƒê√£ click v√†o tr∆∞·ªùng 'S·ªë ƒëi·ªán tho·∫°i'.")
            phone_number_input.send_keys(phone_number)
            print(f"ƒê√£ ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i: {phone_number}")

        except TimeoutException:
            return {"status": "error",
"message": "Kh√¥ng t√¨m th·∫•y c√°c tr∆∞·ªùng th√¥ng tin kh√°ch h√†ng (t√™n, SƒêT) ƒë·ªÉ ƒëi·ªÅn. Vui l√≤ng ki·ªÉm tra l·∫°i XPath ho·∫∑c selector trong code."}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi ƒëi·ªÅn th√¥ng tin c√° nh√¢n: {e}"}

        time.sleep(0.5)  # T·ªëi ∆∞u: 0.5 gi√¢y
        
        print("ƒêang t√¨m v√† click n√∫t 'T·∫°o m·ªõi (F4)' ƒë·ªÉ l∆∞u kh√°ch h√†ng...")
        try:
            # S·ª≠ d·ª•ng XPATH ƒë·ªÉ t√¨m n√∫t d·ª±a tr√™n class 'btn-success' v√† text 'T·∫°o m·ªõi(F4)'
            create_new_customer_button = WebDriverWait(driver, 6).until(  # T·ªëi ∆∞u: 6 gi√¢y
                EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(@class, 'btn-success') and contains(., 'T·∫°o m·ªõi(F4)')]")
                )
            )
            create_new_customer_button.click()
            print("ƒê√£ click n√∫t 'T·∫°o m·ªõi (F4)' ƒë·ªÉ l∆∞u kh√°ch h√†ng m·ªõi.")
            time.sleep(2)  # T·ªëi ∆∞u: 2 gi√¢y - ƒë·ªß ƒë·ªÉ l∆∞u v√† chuy·ªÉn trang
        except TimeoutException as e:
            return {"status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y n√∫t 'T·∫°o m·ªõi (F4)' ho·∫∑c qu√° tr√¨nh l∆∞u kh√¥ng ph·∫£n h·ªìi ho·∫∑c kh√¥ng chuy·ªÉn h∆∞·ªõng ƒë√∫ng trang: {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi l∆∞u kh√°ch h√†ng m·ªõi: {e}"}
        
        time.sleep(1.5)  # T·ªëi ∆∞u: 1.5 gi√¢y - ƒë·ªß ƒë·ªÉ trang load

        # Ki·ªÉm tra th·ªùi gian ƒë√£ tr√¥i qua tr∆∞·ªõc khi g·ªçi h√†m c·∫≠p nh·∫≠t g√≥i t·∫≠p
        elapsed_time = time.time() - start_time
        if elapsed_time > 18:  # N·∫øu ƒë√£ d√πng h∆°n 18 gi√¢y, d·ª´ng l·∫°i (gi·∫£m t·ª´ 25)
            return {"status": "error", "message": f"Qu√° tr√¨nh ƒëƒÉng k√Ω kh√°ch m·ªõi ƒë√£ m·∫•t qu√° nhi·ªÅu th·ªùi gian ({elapsed_time:.1f}s). Vui l√≤ng th·ª≠ l·∫°i."}

        # ƒê√≥ng driver tr∆∞·ªõc khi chuy·ªÉn sang t·∫°o g√≥i cho kh√°ch (m·ªü session m·ªõi)
        if driver:
            driver.quit()
            driver = None

        # Th√™m delay ƒë·ªÉ ch·ªù Timesoft c·∫≠p nh·∫≠t kh√°ch m·ªõi
        time.sleep(2)

        # T·∫°o g√≥i t·∫≠p cho kh√°ch m·ªõi v·ªõi map ph√π h·ª£p
        result_existing_customer = _create_membership_for_customer(
             phone_number, service_type, membership_type, "new"
        )

        if result_existing_customer["status"] == "success":
            print("C·∫≠p nh·∫≠t g√≥i t·∫≠p sau khi ƒëƒÉng k√Ω kh√°ch m·ªõi th√†nh c√¥ng.")
            return {"status": "success",
                    "message": "ƒêƒÉng k√≠ g√≥i t·∫≠p m·ªõi th√†nh c√¥ng v√† ƒë√£ c·∫≠p nh·∫≠t g√≥i t·∫≠p. Qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c chuy·ªÉn sang m√†n h√¨nh c·∫≠p nh·∫≠t khu√¥n m·∫∑t trong 5 gi√¢y",
                    "final_action": "redirect_faceid", "redirect_delay": 5}
        else:
            # In log chi ti·∫øt n·∫øu c√≥ l·ªói khi c·∫≠p nh·∫≠t g√≥i t·∫≠p
            print(f"[auto_dk.py] L·ªói khi c·∫≠p nh·∫≠t g√≥i t·∫≠p cho kh√°ch m·ªõi: {result_existing_customer['message']}")
            return {"status": "error",
                    "message": f"ƒêƒÉng k√Ω kh√°ch m·ªõi th√†nh c√¥ng, nh∆∞ng l·ªói khi c·∫≠p nh·∫≠t g√≥i t·∫≠p: {result_existing_customer['message']}"}

    except TimeoutError:
        elapsed_time = time.time() - start_time
        print(f"‚è∞ Timeout t·ªïng th·ªÉ: Qu√° tr√¨nh automation cho kh√°ch m·ªõi ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y (th·ª±c t·∫ø: {elapsed_time:.1f}s)")
        return {"status": "error", "message": f"Qu√° tr√¨nh automation ƒë√£ v∆∞·ª£t qu√° {TOTAL_TIMEOUT} gi√¢y. Vui l√≤ng th·ª≠ l·∫°i."}
    except Exception as e:
        # Ghi log l·ªói chi ti·∫øt h∆°n n·∫øu c·∫ßn
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ƒëƒÉng k√Ω m·ªõi: {e}")
        return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω m·ªõi: {e}"}
    finally:
        # H·ªßy timeout
        if os.name != 'nt':
            signal.alarm(0)
        elif timer:
            timer.cancel()
        
        # Ch·ªâ quit n·∫øu driver v·∫´n c√≤n (ch∆∞a quit ·ªü tr√™n)
        if driver:
            driver.quit()
        
        # In th·ªùi gian t·ªïng th·ªÉ
        total_elapsed = time.time() - start_time
        print(f"‚è±Ô∏è T·ªïng th·ªùi gian automation cho kh√°ch m·ªõi: {total_elapsed:.1f} gi√¢y")
        if total_elapsed < 18:
            print("üöÄ T·ªëc ƒë·ªô xu·∫•t s·∫Øc cho kh√°ch m·ªõi!")
        elif total_elapsed < 25:
            print("‚ö° T·ªëc ƒë·ªô t·ªët cho kh√°ch m·ªõi!")
        else:
            print("üêå T·ªëc ƒë·ªô ch·∫≠m cho kh√°ch m·ªõi, c·∫ßn t·ªëi ∆∞u th√™m")


# --- Endpoint ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông h√≥a ---
@app.route('/start-automation', methods=['POST'])
def start_automation():
    print("[auto_dk.py] Received request for /start-automation")
    start_time = time.time()
    
    try:
        data = request.get_json()
        print("[auto_dk.py] Received data:", data)
        
        if not data:
            print("[auto_dk.py] No data received in request")
            return jsonify({"status": "error", "message": "No data received"}), 400

        # Validate required fields
        required_fields = ['customerType', 'phoneNumber', 'service', 'membership']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            print(f"[auto_dk.py] Missing required fields: {missing_fields}")
            return jsonify({
                "status": "error",
                "message": f"Missing required fields: {', '.join(missing_fields)}"
            }), 400

        # Extract data
        customer_type = data['customerType']
        phone_number = data['phoneNumber']
        service_type = data['service']
        membership_type = data['membership']
        full_name = data.get('fullName', '')  # Optional for returning customers

        print(f"[auto_dk.py] Processing request for customer type: {customer_type}")
        print(f"[auto_dk.py] Phone: {phone_number}, Service: {service_type}, Membership: {membership_type}")

        # Process based on customer type
        if customer_type == 'new':
            if not full_name:
                print("[auto_dk.py] Missing fullName for new customer")
                return jsonify({
                    "status": "error",
                    "message": "Full name is required for new customers"
                }), 400
            result = _automate_for_new_customer_sync(phone_number, full_name, service_type, membership_type)
        else:  # returning customer
            result = _automate_for_existing_customer_sync(phone_number, service_type, membership_type)

        print(f"[auto_dk.py] Automation result: {result}")
        
        # In th·ªùi gian x·ª≠ l√Ω
        processing_time = time.time() - start_time
        print(f"[auto_dk.py] Total processing time: {processing_time:.1f} seconds")
        
        return jsonify(result)

    except Exception as e:
        processing_time = time.time() - start_time
        print(f"[auto_dk.py] Error in start_automation after {processing_time:.1f}s: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred after {processing_time:.1f}s: {str(e)}"
        }), 500


if __name__ == '__main__':
    print("[auto_dk.py] Starting server on port 5007...")
    app.run(host='0.0.0.0', port=5007, debug=True)