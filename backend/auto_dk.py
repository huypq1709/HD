# automation_app.py
import os
import time
import threading
from flask import Flask, request, jsonify
from flask_cors import CORS
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException, \
    ElementClickInterceptedException

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": ["http://13.229.230.76/", "http://localhost:5173"]}})


# --- C·∫§U H√åNH SELENIUM ---
def _initialize_driver():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt instance WebDriver."""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    # T·ªëi ∆∞u: t·∫Øt t·∫£i ·∫£nh, font, stylesheet (v√† JS n·∫øu kh√¥ng c·∫ßn)
    prefs = {
        "profile.managed_default_content_settings.images": 2,
        "profile.managed_default_content_settings.fonts": 2,
        "profile.managed_default_content_settings.stylesheets": 2,
        # "profile.managed_default_content_settings.javascript": 2,  # B·∫≠t n·∫øu KH√îNG c·∫ßn JS
    }
    chrome_options.add_experimental_option("prefs", prefs)
    try:
        service = ChromeService()
        driver = webdriver.Chrome(service=service, options=chrome_options)
        return driver
    except WebDriverException as e:
        print(f"L·ªói kh·ªüi t·∫°o Chrome driver: {e}")
        return None

def _login_to_timesoft(driver: webdriver.Chrome):
    """Th·ª±c hi·ªán c√°c b∆∞·ªõc ƒëƒÉng nh·∫≠p v√†o Timesoft."""
    try:
        driver.get("https://hdfitnessyoga.timesoft.vn/")
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "UserName"))).send_keys("Vuongvv")
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "Password"))).send_keys("291199")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "btnLogin"))).click()
        # ƒê·ª£i trang ch√≠nh xu·∫•t hi·ªán (v√≠ d·ª•: ki·ªÉm tra m·ªôt ph·∫ßn t·ª≠ ƒë·∫∑c tr∆∞ng sau ƒëƒÉng nh·∫≠p)
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "radio_0")))
        return True
    except TimeoutException:
        return False
    except Exception as e:
        return False


# automation_app.py

# ... (c√°c imports kh√°c)

# C·∫≠p nh·∫≠t √°nh x·∫° g√≥i t·∫≠p sang index cho GYM
MEMBERSHIP_INDEX_MAP_GYM = {
    "1 year": 2,  # GYM 12 TH√ÅNG
    "1 month": 3,  # GYM 1 TH√ÅNG
    "1 day": 4,  # GYM 1 NG√ÄY
    "3 months": 5,  # GYM 3 TH√ÅNG
    "6 months": 6,  # GYM 6 TH√ÅNG
}

# √Ånh x·∫° g√≥i t·∫≠p sang index cho YOGA
MEMBERSHIP_INDEX_MAP_YOGA = {
    "1 month": 1,  # Yoga 1T 12B (v·ªã tr√≠ 1)
    "3 month": 2,  # YOGA 3T 36B (v·ªã tr√≠ 2)
    "6 month": 3,  # YOGA 6T 72B (v·ªã tr√≠ 3)
    "1 year": "last()"  # YOGA 12 TH√ÅNG 144B (v·ªã tr√≠ cu·ªëi c√πng)
}


# ... (c√°c h√†m kh√°c)

# --- H√†m t·ª± ƒë·ªông h√≥a cho kh√°ch c≈© (S·ª¨A ƒê·ªîI L·∫†I B∆Ø·ªöC 4 - Ch·ªçn g√≥i t·∫≠p theo service_type) ---
def _automate_for_existing_customer_sync(phone_number, service_type, membership_type):
    driver = None
    try:
        driver = _initialize_driver()
        if not driver:
            return {"status": "error", "message": "Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát cho t·ª± ƒë·ªông h√≥a."}

        if not _login_to_timesoft(driver):
            return {"status": "error", "message": "ƒêƒÉng nh·∫≠p Timesoft th·∫•t b·∫°i."}

        # B∆Ø·ªöC 1: T√¨m kh√°ch h√†ng (Gi·ªØ nguy√™n)
        try:
            radio_all = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, "radio_0"))
            )
            radio_all.click()
            time.sleep(1)

            search_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input.form-control.form-search-main"))
            )
            search_input.clear()
            search_input.send_keys(phone_number)
            search_input.send_keys(Keys.ENTER)
            time.sleep(2)
        except TimeoutException as e:
            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc t√¨m kh√°ch h√†ng: {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh t√¨m kh√°ch h√†ng: {e}"}

        # B∆Ø·ªöC 2: Click v√†o bi·ªÉu t∆∞·ª£ng "ƒêƒÉng k√Ω g√≥i t·∫≠p" (d·∫•u c·ªông) (Gi·ªØ nguy√™n)
        try:
            register_icon = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable(
                    (By.XPATH, '//a[contains(@ng-click, "showRegisterModal")]//i[@class="fa fa-plus ts-register"]'))
            )
            register_icon.click()
            time.sleep(2)
        except TimeoutException as e:
            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc ƒêƒÉng k√Ω g√≥i t·∫≠p: {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh click ƒêƒÉng k√Ω g√≥i t·∫≠p: {e}"}

        # B∆Ø·ªöC 3: Click v√†o md-select ƒë·ªÉ m·ªü dropdown "Ch·ªçn nh√≥m d·ªãch v·ª•" (Gi·ªØ nguy√™n JS click)
        print(f"üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang m·ªü dropdown 'Ch·ªçn nh√≥m d·ªãch v·ª•'...")
        try:
            service_group_select_element = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[placeholder="Ch·ªçn nh√≥m d·ªãch v·ª•"]'))
            )
            driver.execute_script("arguments[0].click();", service_group_select_element)

            WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
            )
            time.sleep(1.5)
        except TimeoutException as e:

            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc m·ªü nh√≥m d·ªãch v·ª•: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh m·ªü nh√≥m d·ªãch v·ª•: {e}"}

        # B∆Ø·ªöC 3b: Ch·ªçn nh√≥m d·ªãch v·ª• (Gym/Yoga) - SAU KHI DROPDOWN ƒê√É M·ªû (Gi·ªØ nguy√™n ch·ªçn theo Index)
        print(f"üèãÔ∏è‚Äç‚ôÄÔ∏è ƒêang ch·ªçn nh√≥m d·ªãch v·ª•: {service_type.upper()}...")
        try:
            target_index_service = -1
            if service_type.lower() == "gym":
                target_index_service = 1
            elif service_type.lower() == "yoga":
                target_index_service = 2

            if target_index_service == -1:

                return {"status": "error",
                        "message": f"Lo·∫°i d·ªãch v·ª• '{service_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ index ƒë∆∞·ª£c √°nh x·∫°."}

            service_option_element = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.XPATH,
                                            f'//md-select-menu//md-optgroup[@label="Ch·ªçn ch·ª©c danh"]/md-option[{target_index_service}]'
                                            ))
            )

            try:
                service_option_element.click()

            except ElementClickInterceptedException as e:

                driver.execute_script("arguments[0].click();", service_option_element)


            time.sleep(1)

        except TimeoutException as e:

            return {"status": "error",
                    "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc ch·ªçn nh√≥m d·ªãch v·ª• (Timeout theo index): {e}"}
        except NoSuchElementException as e:

            return {"status": "error", "message": f"Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn '{service_type}' theo v·ªã tr√≠ ƒë√£ ƒë·ªãnh: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn nh√≥m d·ªãch v·ª• theo index: {e}"}

        # B∆Ø·ªöC 4: Ch·ªçn g√≥i t·∫≠p (S·ª¨A ƒê·ªîI L·∫†I - CH·ªåN MAP D·ª∞A TR√äN service_type)

        try:
            product_select = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.ProductIdStr"]'))
            )
            product_select.click()

            WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
            )
            time.sleep(1)

            # Ch·ªçn map d·ª±a tr√™n service_type
            current_membership_map = None
            if service_type.lower() == "gym":
                current_membership_map = MEMBERSHIP_INDEX_MAP_GYM
            elif service_type.lower() == "yoga":
                current_membership_map = MEMBERSHIP_INDEX_MAP_YOGA
            else:

                return {"status": "error",
                        "message": f"Lo·∫°i d·ªãch v·ª• '{service_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ map g√≥i t·∫≠p ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a."}

            target_index_membership_xpath_part = current_membership_map.get(membership_type)
            if target_index_membership_xpath_part is None:

                return {"status": "error",
                        "message": f"G√≥i t·∫≠p '{membership_type}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ index ƒë∆∞·ª£c √°nh x·∫° trong map c·ªßa {service_type.upper()}."}

            # X√¢y d·ª±ng XPath s·ª≠ d·ª•ng md-optgroup label="T√¨m g√≥i"
            membership_option_xpath = (
                f'//md-select-menu//md-optgroup[@label="T√¨m g√≥i"]/md-option[{target_index_membership_xpath_part}]'
            )

            membership_option_element = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, membership_option_xpath))
            )

            try:
                membership_option_element.click()

            except ElementClickInterceptedException as e:

                driver.execute_script("arguments[0].click();", membership_option_element)


            time.sleep(1)

        except TimeoutException as e:

            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc ch·ªçn g√≥i t·∫≠p (Timeout theo index): {e}"}
        except NoSuchElementException as e:

            return {"status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p '{membership_type}' theo v·ªã tr√≠ ƒë√£ ƒë·ªãnh cho {service_type}: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn g√≥i t·∫≠p theo index: {e}"}

        # B∆Ø·ªöC 5: Ch·ªçn ki·ªÉu thanh to√°n (Gi·ªØ nguy√™n)

        try:
            payment_type_select = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.PaymentType"]'))
            )
            payment_type_select.click()

            WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
            )
            time.sleep(1)

            transfer_option_element = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH,
                                            '//md-select-menu//md-optgroup[@label="Ch·ªçn ki·ªÉu thanh to√°n"]/md-option[2]'
                                            ))
            )
            transfer_option_element.click()

            time.sleep(1)
        except ElementClickInterceptedException as e:

            driver.execute_script("arguments[0].click();", transfer_option_element)

            time.sleep(1)
        except TimeoutException as e:

            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc ch·ªçn ki·ªÉu thanh to√°n: {e}"}
        except NoSuchElementException as e:

            return {"status": "error", "message": f"T√πy ch·ªçn thanh to√°n 'Chuy·ªÉn kho·∫£n' kh√¥ng t√¨m th·∫•y: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn ki·ªÉu thanh to√°n: {e}"}

        # B∆Ø·ªöC 6: Ch·ªçn t√†i kho·∫£n duy nh·∫•t (Gi·ªØ nguy√™n t·ª´ l·∫ßn s·ª≠a ƒë·ªïi g·∫ßn nh·∫•t - D√πng Index 1 trong md-optgroup + JS Click)

        try:
            bank_account_select = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'md-select[ng-model="item.BankAccountIdStr"]'))
            )
            driver.execute_script("arguments[0].click();", bank_account_select)


            WebDriverWait(driver, 15).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, '.md-select-menu-container[aria-hidden="false"]'))
            )
            time.sleep(2)

            bank_account_option_element = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH,
                                                '//md-select-menu//md-optgroup[@label="Ch·ªçn t√†i kho·∫£n"]/md-option[1]'
                                                ))
            )

            driver.execute_script("arguments[0].click();", bank_account_option_element)



            time.sleep(1)
        except TimeoutException as e:

            try:
                current_html = driver.page_source
            except Exception as html_err:
                return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc ch·ªçn t√†i kho·∫£n: {e}"}
        except NoSuchElementException as e:

            return {"status": "error", "message": f"Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn t√†i kho·∫£n ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ch·ªçn t√†i kho·∫£n: {e}"}

        # B∆Ø·ªöC 7: B·∫•m n√∫t "T·∫°o m·ªõi" (T·∫°o g√≥i t·∫≠p) (Gi·ªØ nguy√™n)

        try:
            create_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, "aInsert"))
            )
            create_button.click()

            WebDriverWait(driver, 15).until(EC.invisibility_of_element_located((By.ID, "aInsert")))

            return {"status": "success", "message": "Gia h·∫°n g√≥i t·∫≠p th√†nh c√¥ng.", "final_action": "return_home"}
        except TimeoutException as e:

            return {"status": "error", "message": f"T·ª± ƒë·ªông h√≥a th·∫•t b·∫°i ·ªü b∆∞·ªõc t·∫°o g√≥i t·∫≠p: {e}"}
        except Exception as e:

            return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh t·∫°o g√≥i t·∫≠p: {e}"}

    except Exception as e:

        return {"status": "error", "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh gia h·∫°n g√≥i t·∫≠p: {e}"}
    finally:
        if driver:
            driver.quit()


# ... (c√°c h√†m _automate_for_new_customer_sync, @app.route, v√† if __name__ == '__main__': nh∆∞ c≈©)




# --- H√†m m√¥ ph·ªèng t·ª± ƒë·ªông h√≥a cho kh√°ch m·ªõi ---
# L∆ØU √ù: Ph·∫ßn n√†y v·∫´n ch·ªâ l√† m√¥ ph·ªèng. B·∫°n c·∫ßn th√™m logic Selenium th·ª±c t·∫ø v√†o ƒë√¢y.
def _automate_for_new_customer_sync(phone_number, full_name, service_type, membership_type):
    driver = None
    try:
        driver = _initialize_driver()
        if not driver:
            return {"status": "error", "message": "Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát cho t·ª± ƒë·ªông h√≥a."}

        if not _login_to_timesoft(driver):
            return {"status": "error", "message": "ƒêƒÉng nh·∫≠p Timesoft th·∫•t b·∫°i."}

        print("ƒêang ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng k√Ω kh√°ch h√†ng m·ªõi (gi·∫£ ƒë·ªãnh)...")
        time.sleep(2) # ƒê·ª£i trang t·∫£i
        try:
            # S·ª≠ d·ª•ng XPATH ƒë·ªÉ t√¨m n√∫t d·ª±a tr√™n class v√† text
            add_new_customer_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(@class, 'btn-green') and contains(., 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω(F1)')]")
                )
            )
            add_new_customer_button.click()
            print("ƒê√£ click n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)'.")
            time.sleep(2)  # ƒê·ª£i form th√™m m·ªõi hi·ªÉn th·ªã
        except TimeoutException as e:
            return {"status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng click ƒë∆∞·ª£c n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)': {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi click n√∫t 'T·∫°o m·ªõi v√† ƒëƒÉng k√Ω (F1)': {e}"}
        time.sleep(1)
        try:
            # T√¨m tr∆∞·ªùng nh·∫≠p "H·ªç v√† t√™n" (full_name)
            # D·ª±a tr√™n HTML b·∫°n cung c·∫•p: ng-model="item.Name"
            full_name_input_selector = (By.XPATH, "//input[@ng-model='item.Name' and @type='text']")
            full_name_input = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located(full_name_input_selector)
            )
            full_name_input.click()  # Click v√†o tr∆∞·ªùng t√™n
            print("ƒê√£ click v√†o tr∆∞·ªùng 'H·ªç v√† t√™n'.")
            full_name_input.send_keys(full_name)  # Sau ƒë√≥ m·ªõi nh·∫≠p
            print(f"ƒê√£ ƒëi·ªÅn t√™n: {full_name}")
            time.sleep(1)

            phone_number_input_selector = (By.XPATH, "//input[@ng-model='item.Mobile' and @type='text']")
            phone_number_input = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located(phone_number_input_selector)
            )
            phone_number_input.click()  # Click v√†o tr∆∞·ªùng s·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn, nh∆∞ng n√™n l√†m)
            print("ƒê√£ click v√†o tr∆∞·ªùng 'S·ªë ƒëi·ªán tho·∫°i'.")
            phone_number_input.send_keys(phone_number)
            print(f"ƒê√£ ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i: {phone_number}")


        except TimeoutException:
            return {"status": "error",
"message": "Kh√¥ng t√¨m th·∫•y c√°c tr∆∞·ªùng th√¥ng tin kh√°ch h√†ng (t√™n, SƒêT) ƒë·ªÉ ƒëi·ªÅn. Vui l√≤ng ki·ªÉm tra l·∫°i XPath ho·∫∑c selector trong code."}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi ƒëi·ªÅn th√¥ng tin c√° nh√¢n: {e}"}

        time.sleep(1)
        print("ƒêang t√¨m v√† click n√∫t 'T·∫°o m·ªõi (F4)' ƒë·ªÉ l∆∞u kh√°ch h√†ng...")
        try:
            # S·ª≠ d·ª•ng XPATH ƒë·ªÉ t√¨m n√∫t d·ª±a tr√™n class 'btn-success' v√† text 'T·∫°o m·ªõi(F4)'
            create_new_customer_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(@class, 'btn-success') and contains(., 'T·∫°o m·ªõi(F4)')]")
                )
            )
            create_new_customer_button.click()
            print("ƒê√£ click n√∫t 'T·∫°o m·ªõi (F4)' ƒë·ªÉ l∆∞u kh√°ch h√†ng m·ªõi.")
            time.sleep(2)  # ƒê·ª£i trang chi ti·∫øt t·∫£i ho√†n t·∫•t v√† c√°c script load
        except TimeoutException as e:
            return {"status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y n√∫t 'T·∫°o m·ªõi (F4)' ho·∫∑c qu√° tr√¨nh l∆∞u kh√¥ng ph·∫£n h·ªìi ho·∫∑c kh√¥ng chuy·ªÉn h∆∞·ªõng ƒë√∫ng trang: {e}"}
        except Exception as e:
            return {"status": "error", "message": f"L·ªói khi l∆∞u kh√°ch h√†ng m·ªõi: {e}"}
        time.sleep(5)  # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω cu·ªëi c√πng tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng

        result_existing_customer = _automate_for_existing_customer_sync(
             phone_number, service_type, membership_type
        )

        if result_existing_customer["status"] == "success":
            print("C·∫≠p nh·∫≠t g√≥i t·∫≠p sau khi ƒëƒÉng k√Ω kh√°ch m·ªõi th√†nh c√¥ng.")
            return {"status": "success",
                    "message": "ƒêƒÉng k√≠ g√≥i t·∫≠p m·ªõi th√†nh c√¥ng v√† ƒë√£ c·∫≠p nh·∫≠t g√≥i t·∫≠p. Qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c chuy·ªÉn sang m√†n h√¨nh c·∫≠p nh·∫≠t khu√¥n m·∫∑t trong 5 gi√¢y",
                    "final_action": "redirect_faceid", "redirect_delay": 5}
        else:
            # N·∫øu c√≥ l·ªói khi c·∫≠p nh·∫≠t g√≥i t·∫≠p, tr·∫£ v·ªÅ l·ªói ƒë√≥
            return {"status": "error",
                    "message": f"ƒêƒÉng k√Ω kh√°ch m·ªõi th√†nh c√¥ng, nh∆∞ng l·ªói khi c·∫≠p nh·∫≠t g√≥i t·∫≠p: {result_existing_customer['message']}"}


    except Exception as e:
        # Ghi log l·ªói chi ti·∫øt h∆°n n·∫øu c·∫ßn
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ƒëƒÉng k√Ω m·ªõi: {e}")
        return {"status": "error", "message": f"L·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω m·ªõi: {e}"}
    finally:
        if driver:
            driver.quit()
# --- Endpoint ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông h√≥a ---
@app.route('/start-automation', methods=['POST'])
def start_automation():
    print("[auto_dk.py] Received request for /start-automation")
    try:
        data = request.get_json()
        print("[auto_dk.py] Received data:", data)
        
        if not data:
            print("[auto_dk.py] No data received in request")
            return jsonify({"status": "error", "message": "No data received"}), 400

        # Validate required fields
        required_fields = ['customerType', 'phoneNumber', 'service', 'membership']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            print(f"[auto_dk.py] Missing required fields: {missing_fields}")
            return jsonify({
                "status": "error",
                "message": f"Missing required fields: {', '.join(missing_fields)}"
            }), 400

        # Extract data
        customer_type = data['customerType']
        phone_number = data['phoneNumber']
        service_type = data['service']
        membership_type = data['membership']
        full_name = data.get('fullName', '')  # Optional for returning customers

        print(f"[auto_dk.py] Processing request for customer type: {customer_type}")
        print(f"[auto_dk.py] Phone: {phone_number}, Service: {service_type}, Membership: {membership_type}")

        # Process based on customer type
        if customer_type == 'new':
            if not full_name:
                print("[auto_dk.py] Missing fullName for new customer")
                return jsonify({
                    "status": "error",
                    "message": "Full name is required for new customers"
                }), 400
            result = _automate_for_new_customer_sync(phone_number, full_name, service_type, membership_type)
        else:  # returning customer
            result = _automate_for_existing_customer_sync(phone_number, service_type, membership_type)

        print(f"[auto_dk.py] Automation result: {result}")
        return jsonify(result)

    except Exception as e:
        print(f"[auto_dk.py] Error in start_automation: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500


if __name__ == '__main__':
    print("[auto_dk.py] Starting server on port 5007...")
    app.run(host='0.0.0.0', port=5007, debug=True)